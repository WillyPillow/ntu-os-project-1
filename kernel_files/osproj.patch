diff -Naur orig/arch/x86/entry/syscalls/syscall_32.tbl linux-5.6.4/arch/x86/entry/syscalls/syscall_32.tbl
--- orig/arch/x86/entry/syscalls/syscall_32.tbl	2020-04-28 23:18:24.656663628 +0800
+++ linux-5.6.4/arch/x86/entry/syscalls/syscall_32.tbl	2020-04-28 23:18:42.023330292 +0800
@@ -442,3 +442,6 @@
 435	i386	clone3			sys_clone3			__ia32_sys_clone3
 437	i386	openat2			sys_openat2			__ia32_sys_openat2
 438	i386	pidfd_getfd		sys_pidfd_getfd			__ia32_sys_pidfd_getfd
+
+439	i386	osproj_gettime	__ia32_sys_osproj_gettime
+440	i386	osproj_printk	__ia32_sys_osproj_printk
diff -Naur orig/arch/x86/entry/syscalls/syscall_64.tbl linux-5.6.4/arch/x86/entry/syscalls/syscall_64.tbl
--- orig/arch/x86/entry/syscalls/syscall_64.tbl	2020-04-28 23:18:24.656663628 +0800
+++ linux-5.6.4/arch/x86/entry/syscalls/syscall_64.tbl	2020-04-28 23:18:42.023330292 +0800
@@ -360,6 +360,9 @@
 437	common	openat2			__x64_sys_openat2
 438	common	pidfd_getfd		__x64_sys_pidfd_getfd
 
+439	common	osproj_gettime	__x64_sys_osproj_gettime
+440	common	osproj_printk	__x64_sys_osproj_printk
+
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
 # for native 64-bit operation. The __x32_compat_sys stubs are created
diff -Naur orig/include/linux/syscalls.h linux-5.6.4/include/linux/syscalls.h
--- orig/include/linux/syscalls.h	2020-04-28 23:18:26.496663627 +0800
+++ linux-5.6.4/include/linux/syscalls.h	2020-04-28 23:19:13.856663622 +0800
@@ -1225,6 +1225,10 @@
  */
 asmlinkage long sys_ni_syscall(void);
 
+asmlinkage long sys_osproj_gettime(struct timespec64 __user *ts);
+
+asmlinkage long sys_osproj_printk(char __user *name, struct timespec64 __user *begin);
+
 #endif /* CONFIG_ARCH_HAS_SYSCALL_WRAPPER */
 
 
diff -Naur orig/include/uapi/asm-generic/unistd.h linux-5.6.4/include/uapi/asm-generic/unistd.h
--- orig/include/uapi/asm-generic/unistd.h	2020-04-28 23:18:26.606663628 +0800
+++ linux-5.6.4/include/uapi/asm-generic/unistd.h	2020-04-28 23:19:23.443330292 +0800
@@ -856,8 +856,13 @@
 #define __NR_pidfd_getfd 438
 __SYSCALL(__NR_pidfd_getfd, sys_pidfd_getfd)
 
+#define __NR_osproj_gettime 439
+__SYSCALL(__NR_osproj_gettime, sys_osproj_gettime)
+#define __NR_osproj_gettime 440
+__SYSCALL(__NR_osproj_printk, sys_osproj_printk)
+
 #undef __NR_syscalls
-#define __NR_syscalls 439
+#define __NR_syscalls 441
 
 /*
  * 32 bit systems traditionally used different
diff -Naur orig/kernel/Makefile linux-5.6.4/kernel/Makefile
--- orig/kernel/Makefile	2020-04-28 23:18:27.063330295 +0800
+++ linux-5.6.4/kernel/Makefile	2020-04-28 23:18:54.709996961 +0800
@@ -10,7 +10,7 @@
 	    extable.o params.o \
 	    kthread.o sys_ni.o nsproxy.o \
 	    notifier.o ksysfs.o cred.o reboot.o \
-	    async.o range.o smpboot.o ucount.o
+	    async.o range.o smpboot.o ucount.o osproj.o
 
 obj-$(CONFIG_MODULES) += kmod.o
 obj-$(CONFIG_MULTIUSER) += groups.o
diff -Naur orig/kernel/osproj.c linux-5.6.4/kernel/osproj.c
--- orig/kernel/osproj.c	1970-01-01 08:00:00.000000000 +0800
+++ linux-5.6.4/kernel/osproj.c	2020-04-28 23:21:05.196663628 +0800
@@ -0,0 +1,21 @@
+#include <linux/kernel.h>
+#include <linux/ktime.h>
+#include <linux/time.h>
+#include <linux/syscalls.h>
+
+SYSCALL_DEFINE1(osproj_gettime, struct timespec64 __user*, ts) {
+	struct timespec64 kts;
+	ktime_get_ts64(&kts);
+	copy_to_user(ts, &kts, sizeof(kts));
+	return 0;
+}
+
+SYSCALL_DEFINE2(osproj_printk, char __user*, name, struct timespec64 __user*, begin) {
+	struct timespec64 beg, end;
+	char buf[64];
+	copy_from_user(&beg, begin, sizeof(beg));
+	strncpy_from_user(buf, name, 64);
+	ktime_get_ts64(&end);
+	printk("[Project1] %s %lld.%ld %lld.%ld\n", buf, beg.tv_sec, beg.tv_nsec, end.tv_sec, end.tv_nsec);
+	return 0;
+}
diff -Naur orig/kernel/sys_ni.c linux-5.6.4/kernel/sys_ni.c
--- orig/kernel/sys_ni.c	2020-04-28 23:18:27.069996961 +0800
+++ linux-5.6.4/kernel/sys_ni.c	2020-04-28 23:18:54.709996961 +0800
@@ -299,6 +299,9 @@
 COND_SYSCALL_COMPAT(recvmmsg_time32);
 COND_SYSCALL_COMPAT(recvmmsg_time64);
 
+COND_SYSCALL(osproj_gettime);
+COND_SYSCALL(osproj_printk);
+
 /*
  * Architecture specific syscalls: see further below
  */
